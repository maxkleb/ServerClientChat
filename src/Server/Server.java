/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author MaxKleb
 */
public class Server extends javax.swing.JFrame {
     private ArrayList<String> names = new ArrayList<String>(); 
     private String onlineNames = "";
     private int serverPort = 18524;
     private ServerSocket serverSocket = null;
     private Thread serverThread = null;
     private Socket[] clientSocket = new Socket[5]; 
     private Thread[] tr = new Thread[5];
     private int count = 0; 
     private String[] nameArray = new String[5]; 
     private boolean isRun = false;
     private boolean needToClose = false;
     
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        serverText = new javax.swing.JTextPane();
        startButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(serverText);

        startButton.setText("Start Session");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Server Application");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        
        if(startButton.getText().equals("Start Session")){
            isRun = true;
            needToClose = false;
        serverThread = new Thread(){
            
         public void run(){
             serverText.setText("----------------WElCOME----------------");
                 try {
                     serverSocket = new ServerSocket(serverPort);
                 } catch (IOException ex) {
                     serverText.setText(serverText.getText()+"\nUnable to connect to " +serverPort+" port!\n" );
                 }
                 serverText.setText(serverText.getText()+"\nConnection to " +serverPort+" port!\n" );
                
                 while(isRun){
                     
                     try{
                          if(needToClose) 
                  {
                      isRun = false;
                      //serverSocket.close();
                       break;
                  }
                         while(count<5){
                            clientSocket[count] = serverSocket.accept();
                          tr[count] = new ClientListener(clientSocket[count]);
                         
                         tr[count].start();
                         count++;
                           serverText.setText(serverText.getText()+"\nSocket has been opened.\n");
                         InetAddress addr = clientSocket[count-1].getInetAddress();
                              serverText.setText(serverText.getText()+"\nConnection to " +addr.getHostAddress()+"\n");
                 
                         }
                    } catch (IOException ex) {
                        serverText.setText(serverText.getText()+"\nServer was stoped!\n" );
                    }
                    
                 }
         }
        };
        serverThread.start();
        startButton.setText("Stop Session");
        }
        else{
            isRun = false;
            PrintWriter out;
            needToClose = true;
            names.clear();
             try {
               for(int i=0;i<count;i++){
                   if(!nameArray[i].equals("-1")){
                 out = new PrintWriter(clientSocket[i].getOutputStream(), true);
                 out.println("<System>:<DisconnectAll>");
                clientSocket[i].close();}
                   }
               count = 0;
               serverSocket.close();
             
             } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                 }
              startButton.setText("Start Session");
             }
    }//GEN-LAST:event_startButtonActionPerformed

    private class ClientListener extends Thread {
     
    private String name;
    private Socket client;
        
    public ClientListener(Socket client){
    super();
    //this.name = name;
    this.client = client;
    } 
   // private String name = "";
    
    public void run(){
       //  serverText.setText(serverText.getText()+"\nThe name is: "+name );
        BufferedReader in;
        PrintWriter out;
        try {
            in = new BufferedReader(new InputStreamReader(client.getInputStream()));
             String msg;
             String temp;
             while ((msg = in.readLine()) != null){
                 
                 if(needToClose){
                    // client.close();
                     in.close();
                     break;
                 }
                 
                 if (msg.contains("<system>:name")){
                   //   serverText.setText(serverText.getText()+"\nSystem message is :"+msg);
                     name = msg.substring(14);
                      names.add(name);
                      nameArray[count-1] = name; 
                      onlineNames = names.toString();
                    }
                 else{
                     if(msg.contains("<system>")&&msg.contains("online")){
                    // msg ="<System>:"+name+"Online:";
                       msg += ':';
                     
                     msg += onlineNames;
                   //BufferedReader br = new BufferedReader(new InputStreamReader(msg.getBytes("UTF-8")));
                    // serverText.setText(serverText.getText()+"\n"+msg);
                     }
                  if(msg.contains("<system>")&&msg.contains("<Disconnect>")){
                       serverText.setText(serverText.getText()+"\n!!!!!Disconnect for :"+msg.substring(22));
                      names.remove(msg.substring(22));
                      for(int i=0;i<count;i++){
                          if(nameArray[i].equals(msg.substring(22)))
                              nameArray[i] = "-1";
                      }
                      
                  }
              for(int g=0;g<count;g++){
                  if(!nameArray[g].equals("-1")){
                 out = new PrintWriter(clientSocket[g].getOutputStream(), true);  //open a PrintWriter ons the socket
                // while ((msg = in.readLine()) != null) 
                  out.println(msg);}}
                    
            
                 }
                 serverText.setText(serverText.getText()+"\n "+msg);
             }
        } catch (IOException ex) {
            serverText.setText(serverText.getText()+"\nWe have some problem here!");
        }
       
        
    }
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane serverText;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
